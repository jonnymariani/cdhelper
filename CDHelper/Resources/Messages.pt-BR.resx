<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AndMore" xml:space="preserve">
    <value>e mais {0}</value>
  </data>
  <data name="CDsFound" xml:space="preserve">
    <value>{0} CDs encontrados!</value>
  </data>
  <data name="Command" xml:space="preserve">
    <value>comando</value>
  </data>
  <data name="CommandList" xml:space="preserve">
    <value>Lista de Comandos</value>
  </data>
  <data name="ExampleUsage" xml:space="preserve">
    <value>Exemplo de Uso</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Exporta sua coleção para um arquivo .txt</value>
  </data>
  <data name="ExportAll" xml:space="preserve">
    <value>Exporta de todas as opções acima</value>
  </data>
  <data name="ExportingToFile" xml:space="preserve">
    <value>Exportando para arquivo</value>
  </data>
  <data name="ExportInv" xml:space="preserve">
    <value>Exporta apenas do inventário</value>
  </data>
  <data name="ExportJuke" xml:space="preserve">
    <value>Exporta apenas da jukebox</value>
  </data>
  <data name="ExportRoom" xml:space="preserve">
    <value>Exporta apenas do quarto</value>
  </data>
  <data name="ExtensionDescription" xml:space="preserve">
    <value>CD Helper é uma extensão para ajudá-lo a gerenciar e descobrir CDs no Habbo com mais facilidade</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Informações</value>
  </data>
  <data name="LoadedSuccessfully" xml:space="preserve">
    <value>CD Helper foi carregado com sucesso</value>
  </data>
  <data name="NoCDsFound" xml:space="preserve">
    <value>Nenhum CD encontrado</value>
  </data>
  <data name="OfferBy" xml:space="preserve">
    <value>{0}\nOferta por {1}</value>
  </data>
  <data name="OpensThisScreen" xml:space="preserve">
    <value>Uh... bem... abre essa tela. O que você esperava?</value>
  </data>
  <data name="RetrievesListOfCDs" xml:space="preserve">
    <value>Recupera a lista de CDs da jukebox da sala</value>
  </data>
  <data name="RetrievesNameMarketplace" xml:space="preserve">
    <value>Recupera o nome do CD atual da feira livre</value>
  </data>
  <data name="RoomNotBeingTracked" xml:space="preserve">
    <value>O estado do quarto não está sendo rastreado. Por favor, entre novamente no quarto e tente novamente</value>
  </data>
  <data name="ShowingXofYCds" xml:space="preserve">
    <value>Mostrando {0} de {1} CDs. Para ver mais, tente {2}</value>
  </data>
  <data name="SuccessfullyExportedCDs" xml:space="preserve">
    <value>{0} CDs exportados com sucesso</value>
  </data>
  <data name="ToUseCommands" xml:space="preserve">
    <value>Para usar os comandos, digite-os no chat da seguinte forma</value>
  </data>
  <data name="UnableLoadInventory" xml:space="preserve">
    <value>Não foi possível carregar os dados do inventário</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Comando desconhecido:\n{0}\nTente:\n{1}</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Uso</value>
  </data>
</root>